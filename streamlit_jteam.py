# -*- coding: utf-8 -*-
"""Streamlit_Jteam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V46MhVyqbA-u4jJeWN8S7QOKMEKHCGPC
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import shap
from lime import lime_tabular
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# Konfigurasi Halaman
st.set_page_config(
    page_title="üö® Sistem Peringatan Dini Risiko UMKM berbasis XAI",
    page_icon="üö®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS untuk styling
st.markdown("""
<style>
.main-header {
    font-size: 2.2rem;
    color: #1f77b4;
    text-align: center;
    margin-bottom: 2rem;
    font-weight: 700;
}
.section-header {
    font-size: 1.4rem;
    color: #2c3e50;
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-weight: 600;
    border-bottom: 2px solid #3498db;
    padding-bottom: 0.5rem;
}
.explanation-box {
    background-color: #f8f9fa;
    border-radius: 10px;
    padding: 15px;
    margin: 10px 0;
    border-left: 4px solid #1f77b4;
}
.metric-container {
    background-color: #ffffff;
    padding: 1rem;
    border-radius: 10px;
    border: 1px solid #e1e8ed;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin: 0.5rem 0;
}
.feature-importance {
    background-color: #f8f9fa;
    padding: 10px;
    border-radius: 8px;
    margin: 6px 0;
    border-left: 3px solid #28a745;
}
.feature-negative {
    border-left-color: #dc3545;
}
.sidebar-header {
    font-size: 1.1rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
}
.info-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem;
    border-radius: 10px;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

# Daftar fitur model (16 variabel numerik utama)
MODEL_FEATURES = [
    'Garis_Kemiskinan', 'Indeks_Pembangunan_Manusia', 'Persen_Penduduk_Miskin',
    'Tingkat Pengangguran Terbuka', 'Upah Minimum', 'Jumlah Penduduk (Ribu)',
    'Laju Pertumbuhan Penduduk per Tahun', 'Persentase Penduduk',
    'Kepadatan Penduduk per km persegi (Km2)', 'Rasio Jenis Kelamin Penduduk',
    'PDRB', 'Laju_Inflasi', 'Gini_Ratio', 'investasi_per_kapita',
    'Jumlah Perusahaan Kecil', 'Jumlah Perusahaan'
]

FULL_EXPECTED_COLUMNS = MODEL_FEATURES + [
    'kabupaten_kota', 'tahun', 'kuartal', 'Proksi Inflasi'
]

# === Fungsi-fungsi utama ===
def load_model():
    """Memuat model prediksi"""
    try:
        pipeline = joblib.load('Pipeline/risk_prediction_pipeline.pkl')
        return pipeline
    except Exception as e:
        st.error(f"Gagal memuat model: {e}")
        return None

def validate_csv(uploaded_file):
    """Validasi struktur file CSV"""
    try:
        df = pd.read_csv(uploaded_file)
        missing_cols = set(FULL_EXPECTED_COLUMNS) - set(df.columns)
        if missing_cols:
            st.warning(f"Kolom yang hilang: {', '.join(missing_cols)}")
            return None
        return df
    except Exception as e:
        st.error(f"Error membaca CSV: {e}")
        return None

def generate_shap_explanations(model, X):
    """Menghasilkan penjelasan SHAP"""
    try:
        explainer = shap.Explainer(model.named_steps['xgb_model'] if hasattr(model, 'named_steps') else model)
        shap_values = explainer(X)
        return shap_values
    except Exception as e:
        st.warning(f"Gagal membuat analisis SHAP: {e}")
        return None

def generate_lime_explanation(model, X, instance_idx):
    """Menghasilkan penjelasan LIME"""
    try:
        if hasattr(model, 'named_steps'):
            underlying_model = model.named_steps['xgb_model']
        else:
            underlying_model = model
        explainer = lime_tabular.LimeTabularExplainer(
            training_data=X.values,
            feature_names=MODEL_FEATURES,
            mode='regression',
            random_state=42
        )
        exp = explainer.explain_instance(
            X.iloc[instance_idx].values,
            underlying_model.predict,
            num_features=10
        )
        return exp
    except Exception as e:
        st.warning(f"Gagal membuat analisis LIME: {e}")
        return None

# === Main App ===
def main():
    st.markdown('<div class="main-header">üö® Sistem Peringatan Dini Risiko UMKM berbasis XAI</div>', unsafe_allow_html=True)

    # Sidebar
    with st.sidebar:
        st.markdown('<div class="sidebar-header">üìÇ Upload Data</div>', unsafe_allow_html=True)
        uploaded_file = st.file_uploader(
            "Unggah file CSV data sosial-ekonomi",
            type=['csv']
        )
        if uploaded_file:
            st.success("‚úÖ Data berhasil diunggah!")

        st.markdown("---")
        st.markdown('<div class="sidebar-header">‚ÑπÔ∏è Informasi Model</div>', unsafe_allow_html=True)
        st.markdown("""
        Model menggunakan data:
        - üìä Indikator Ekonomi
        - üë• Indikator Sosial
        - üèõÔ∏è Data Demografi
        - ‚è≥ Data Waktu (tahun/kuartal)
        """)

    # Load model
    model = load_model()
    if model is None:
        st.stop()

    # Jika ada file diupload
    if uploaded_file:
        df = validate_csv(uploaded_file)
        if df is not None:
            st.success(f"‚úÖ Data valid! Jumlah baris: {len(df)}")

            with st.expander("üìã Pratinjau Data"):
                st.dataframe(df.head())

            # Tombol prediksi
            if st.button("üöÄ Jalankan Prediksi"):
                try:
                    X = df[MODEL_FEATURES].copy()
                    preds = model.predict(X)
                    df['Skor_Risiko'] = preds

                    st.markdown('<div class="section-header">üìà Hasil Prediksi</div>', unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    col1.metric("Rata-rata Skor Risiko", f"{np.mean(preds):.3f}")
                    col2.metric("Skor Risiko Minimum", f"{np.min(preds):.3f}")
                    col3.metric("Skor Risiko Maksimum", f"{np.max(preds):.3f}")

                    with st.expander("üìä Tabel Prediksi Lengkap"):
                        st.dataframe(df[['kabupaten_kota', 'tahun', 'kuartal', 'Skor_Risiko']])

                    # SHAP
                    st.markdown('<div class="section-header">üîç Analisis Global (SHAP)</div>', unsafe_allow_html=True)
                    shap_values = generate_shap_explanations(model, X)
                    if shap_values is not None:
                        fig, ax = plt.subplots(figsize=(10,6))
                        shap.summary_plot(shap_values, X, show=False)
                        st.pyplot(fig)

                    # LIME
                    st.markdown('<div class="section-header">üîé Analisis Lokal (LIME)</div>', unsafe_allow_html=True)
                    contoh_idx = 0
                    lime_exp = generate_lime_explanation(model, X, contoh_idx)
                    if lime_exp:
                        st.write(f"üìç Analisis untuk {df.iloc[contoh_idx]['kabupaten_kota']} - {df.iloc[contoh_idx]['tahun']} Q{df.iloc[contoh_idx]['kuartal']}")
                        for f, w in lime_exp.as_list():
                            warna = "üü¢" if w < 0 else "üî¥"
                            st.markdown(f"{warna} **{f}** : {w:.3f}")

                    # Unduh hasil
                    st.markdown('<div class="section-header">üíæ Unduh Hasil</div>', unsafe_allow_html=True)
                    st.download_button(
                        "üì• Download CSV hasil prediksi",
                        df.to_csv(index=False),
                        "hasil_prediksi_risiko.csv",
                        "text/csv"
                    )
                except Exception as e:
                    st.error(f"Gagal melakukan prediksi: {e}")
    else:
        st.markdown('<div class="info-card">', unsafe_allow_html=True)
        st.markdown("### üëã Selamat Datang!")
        st.markdown("Gunakan aplikasi ini untuk **menganalisis risiko kegagalan UMKM** dengan pendekatan *Explainable AI (XAI)*.")
        st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()